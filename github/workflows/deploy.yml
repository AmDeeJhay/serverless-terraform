name: Deploy Full-Stack Serverless App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'

jobs:
  # Test and build backend
  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        run: npm ci

      - name: Lint backend code
        run: npm run lint

      - name: Run backend tests
        run: npm run test

      - name: Build backend
        run: npm run build

      - name: Package Lambda functions
        run: |
          cd dist
          zip -r createItem.zip createItem.js
          zip -r getItems.zip getItems.js

      - name: Upload Lambda artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-functions
          path: backend/dist/*.zip
          retention-days: 1

  # Test and build frontend
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm ci

      - name: Lint frontend code
        run: npm run lint

      - name: Type check frontend
        run: npm run type-check

      - name: Build frontend
        run: npm run build
        env:
          API_BASE_URL: https://placeholder.execute-api.us-east-1.amazonaws.com/prod

  # Deploy infrastructure
  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./infra
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Lambda artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-functions
          path: backend/dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -no-color
        continue-on-error: false

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -no-color

      - name: Get API Gateway URL
        id: api-url
        run: |
          API_URL=$(terraform output -raw api_gateway_url)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "API_URL=$API_URL" >> $GITHUB_ENV

      - name: Update SSM Parameter with API URL
        run: |
          aws ssm put-parameter \
            --name "/serverless-app/api-url" \
            --value "${{ steps.api-url.outputs.api_url }}" \
            --type "String" \
            --overwrite

    outputs:
      api_url: ${{ steps.api-url.outputs.api_url }}

  # Deploy frontend to Vercel
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build frontend with API URL
        run: npm run build
        env:
          API_BASE_URL: ${{ needs.deploy-infrastructure.outputs.api_url }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend

  # Health check
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health check API
        run: |
          API_URL="${{ needs.deploy-infrastructure.outputs.api_url }}"
          echo "Testing API at: $API_URL"
          
          # Test GET /items endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL/items")
          if [ $response -eq 200 ]; then
            echo "‚úÖ GET /items endpoint is healthy"
          else
            echo "‚ùå GET /items endpoint returned status $response"
            exit 1
          fi
          
          # Test POST /items endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -d '{"name":"Test Item","description":"Health check item"}' \
            "$API_URL/items")
          if [ $response -eq 201 ]; then
            echo "‚úÖ POST /items endpoint is healthy"
          else
            echo "‚ùå POST /items endpoint returned status $response"
            exit 1
          fi

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Deployment successful!"
          echo "API URL: ${{ needs.deploy-infrastructure.outputs.api_url }}"
          echo "Frontend: Deployed to Vercel"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs above for details"
          exit 1