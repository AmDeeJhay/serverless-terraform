# Dependencies
node_modules/
*/node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Production builds
.next/
out/
dist/
build/

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.env.*.local

# Vercel
.vercel

# Terraform
infra/.terraform/
infra/.terraform.lock.hcl
infra/terraform.tfstate
infra/terraform.tfstate.backup
infra/terraform.tfvars
infra/*.tfplan

# AWS
.aws/

# Lambda packages
backend/dist/*.zip

# IDE and editors
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
logs
*.log

# Local development
.local/
temp/
tmp/

# Jest
coverage/

# Storybook build outputs
storybook-static

# Temporary folders
tmp/
temp/

# Lambda deployment packages
*.zip

# CDK
cdk.out/

# Local Terraform run files
*.tfstate
*.tfstate.*
*.tfplan
*.tfplan.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Serverless Framework
.serverless/

# AWS SAM
.aws-sam/
samconfig.toml

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
.venv/
pip-log.txt
pip-delete-this-directory.txt
.pytest_cache/

# Documentation
docs/_build/

# Backup files
*.bak
*.backup

# Editor directories and files
.vscode/
!.vscode/extensions.json
.idea
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Package manager lock files (keep one, remove others based on preference)
# package-lock.json  # Uncomment if using yarn
# yarn.lock          # Uncomment if using npm

# macOS
*.DS_Store
.AppleDouble
.LSOverride

# Windows
*.exe
*.msi
*.msm
*.msp
*.lnk

# Linux
*~
```

## Additional Scripts

### scripts/package-lambda.sh
```bash
#!/bin/bash

# Package Lambda functions for deployment
set -e

echo "üîß Packaging Lambda functions..."

# Create dist directory if it doesn't exist
mkdir -p backend/dist

# Build the backend
echo "üì¶ Building backend..."
cd backend
npm run build
cd ..

# Package each Lambda function
echo "üì¶ Packaging createItem function..."
cd backend/dist
zip -r createItem.zip createItem.js
echo "üì¶ Packaging getItems function..."
zip -r getItems.zip getItems.js
cd ../..

echo "‚úÖ Lambda functions packaged successfully!"
```

## CI/CD Pipeline

### .github/workflows/deploy.yml
```yaml
name: Deploy Full-Stack Serverless App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'

jobs:
  # Test and build backend
  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        run: npm ci

      - name: Lint backend code
        run: npm run lint

      - name: Run backend tests
        run: npm run test

      - name: Build backend
        run: npm run build

      - name: Package Lambda functions
        run: |
          cd dist
          zip -r createItem.zip createItem.js
          zip -r getItems.zip getItems.js

      - name: Upload Lambda artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-functions
          path: backend/dist/*.zip
          retention-days: 1

  # Test and build frontend
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm ci

      - name: Lint frontend code
        run: npm run lint

      - name: Type check frontend
        run: npm run type-check

      - name: Build frontend
        run: npm run build
        env:
          API_BASE_URL: https://placeholder.execute-api.us-east-1.amazonaws.com/prod

  # Deploy infrastructure
  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./infra
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Lambda artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-functions
          path: backend/dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -no-color
        continue-on-error: false

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -no-color

      - name: Get API Gateway URL
        id: api-url
        run: |
          API_URL=$(terraform output -raw api_gateway_url)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "API_URL=$API_URL" >> $GITHUB_ENV

      - name: Update SSM Parameter with API URL
        run: |
          aws ssm put-parameter \
            --name "/serverless-app/api-url" \
            --value "${{ steps.api-url.outputs.api_url }}" \
            --type "String" \
            --overwrite

    outputs:
      api_url: ${{ steps.api-url.outputs.api_url }}

  # Deploy frontend to Vercel
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build frontend with API URL
        run: npm run build
        env:
          API_BASE_URL: ${{ needs.deploy-infrastructure.outputs.api_url }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend

  # Health check
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health check API
        run: |
          API_URL="${{ needs.deploy-infrastructure.outputs.api_url }}"
          echo "Testing API at: $API_URL"
          
          # Test GET /items endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL/items")
          if [ $response -eq 200 ]; then
            echo "‚úÖ GET /items endpoint is healthy"
          else
            echo "‚ùå GET /items endpoint returned status $response"
            exit 1
          fi
          
          # Test POST /items endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -d '{"name":"Test Item","description":"Health check item"}' \
            "$API_URL/items")
          if [ $response -eq 201 ]; then
            echo "‚úÖ POST /items endpoint is healthy"
          else
            echo "‚ùå POST /items endpoint returned status $response"
            exit 1
          fi

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Deployment successful!"
          echo "API URL: ${{ needs.deploy-infrastructure.outputs.api_url }}"
          echo "Frontend: Deployed to Vercel"
```

## Getting Started

### Prerequisites
- Node.js 18+
- AWS CLI configured with appropriate permissions
- Terraform Cloud account
- Vercel account (for frontend deployment)

### Setup Instructions

1. **Clone and install dependencies:**
```bash
git clone 
cd fullstack-serverless
npm install
cd frontend && npm install && cd ..
cd backend && npm install && cd ..
```

2. **Configure Terraform Cloud:**
- Update `infra/terraform.tf` with your organization name
- Set up workspace variables in Terraform Cloud:
  - `AWS_ACCESS_KEY_ID`
  - `AWS_SECRET_ACCESS_KEY`

3. **Configure GitHub Secrets:**
```
AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY
TF_API_TOKEN (Terraform Cloud API token)
VERCEL_TOKEN
VERCEL_ORG_ID
VERCEL_PROJECT_ID
```

4. **Local development:**
```bash
# Start frontend development server
npm run dev:frontend

# Build and test backend locally
npm run build:backend
npm run test:backend

# Deploy infrastructure locally (after configuring AWS CLI)
npm run terraform:init
npm run terraform:plan
npm run terraform:apply
```

5. **Production deployment:**
- Push to `main` branch triggers automatic deployment
- Infrastructure is deployed via Terraform Cloud
- Frontend is deployed to Vercel
- Health checks verify deployment success

### Environment Variables

**Frontend (.env.local):**
```env
API_BASE_URL=https://your-api-id.execute-api.us-east-1.amazonaws.com/prod
```

**Backend (set via Terraform):**
```env
DYNAMODB_TABLE_NAME=items-table
AWS_REGION=us-east-1
```

This setup provides a complete, production-ready serverless application with proper CI/CD pipelines, infrastructure as code, and monitoring capabilities.